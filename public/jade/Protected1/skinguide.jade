// UNCLASSIFIED

extends site
append siteparms
	- help = "This is the skinnng guide. See also the <a href='/api.view'>api guide</a>."
	- view = "Min"
append sitearea

	#accordion.Frameworks
		#fit.Introduction
			:markdown
				Views from the #{title} are rendered using the [Jade](http://jade-lang.com/tutorial/) 
				markdown compiler.  When a client browses to a view, say the [/home.view](/home.view), the #{title} attempts 
				to retrieve (if enabled) the **home.jade** skin from the [engines db](/engine.view).  If no such view
				exists, the #{title} attempts to retrieve the **home.jade** view from the **default** skins folder.  Jade skins
				can also serve as frameworks for other skins.  Indeed, except for the most trivial views, Jade skins should
				extend either the builtin **layout**, **site**, **doc**, or **brief** framework. 

		#fit.Layout.Framework
			:markdown
				A skin employs the [layout framework](/layout.view) like this:

					extends layout
					append layoutparms
						- Layout = "LAYOUT"
						- Feature = {Theme:0,Vide:0,Typeset:0,W2UI:0,elFinder:0,DataTable:0,jqGrid:0,Isotope:0}
					append layoutarea
						Content indented here
							
				where **LAYOUT** defines the desired view (technology): **Typeset** (mathjax), **Chart** (d3), **Brief** (reveal), **Mobile** (dojo), **Model** (jointjs+), **Grid** (extjs),
				**Guide** (jQuery), **Carousel** (extjs core), or a WebGL technology (**Voxel**, **Scene**, **Three**).  And where Feature plugins can be enabled/disabled (1/0) for a
				specific ExtJS themes (**Theme** switching) or jQuery plugins (**Theme** switching, **Vide** video viewer, **Mathjax** support, **elFinder**, **Isotope**, or **Apy** 
				pivot, **W2UI**, **DataTable** or **jqGrid** grid).

		#fit.Site.Framework
			:markdown
				A skin employs the [site framework](/site.view) like this:
	
					extends site
					append siteparms
						- view = query.ex || "Example Site"
						- parms = {workflows:"ex=workflows",enginedb:"ex=enginedb",embedweb:"ex=embedweb", odbc:"ex=odbc", immersion:"ex=immersion", grids:"ex=grids", guides:"ex=guides", typesets:"ex=typesets", brief:"ex=briefs", visuals:"ex=visuals"}
						- help = "Provides example sites where ex = desired site view."
					append sitearea
						Content indented here

				where:

					parms = {opt1: "q=v1", opt2: "q=v2", ...} dropdown view options
					dock = [left,right,top,bottom] folder tab docking
					dims = [width,height] default dimensions
					view = [Home,Kiss,Engr,Min,default] page format
					page = rows grid page size
		
		#fit.Document.Framework
			:markdown
				A skin employs the [document framework](/doc.view) like like:
				
					extends doc
					append docparms
						- page = 50
						- dims = "[1000,2000]"
					append docarea
						Content indented here

				where:

					dims = [width,height] default dimensions
					page = rows grid page size
			
			
		#fit.Briefing.Framework
			:markdown
				A skin employs the [briefing framework](/brief.view) like this:
				
					extends brief
					append briefparms
						- Classif = "(U) Unclassified"
					append briefarea
						Content indented here

				where:

					Classif = [""] overall classification level

	#exsite.Example.Skins(path="/",dims="[800,500]")

	#folder.Skinning.Language(dock="left")
			
		#fit.Widget.Layout
			:markdown
				In addition to standard html tags, Jade skins can include **Widget** tags as follows:  

					framework (see Introduction)
					:
					#Widget.Name(Attributes)
						#Widget.Name(Attributes)
						#Widget.Name(Attributes)
						:
						#Widget.Name(Attributes)
							#Widget.Name(Attributes)
							#Widget.Name(Attributes)
							:
						#Widget.Name(Attributes)
							:
					#Widget.Name(Attributes)
						tag(attribute=value,...)
							inner html defines widget help/content
						ishtml 
							tag-free, widget-free inner html defines widget help/content
						:markdown
							inner html ala Darling markown defines widget help/content

				where ":" represents a Jade control (e.g. if, case, etc ...) and where **Widget** specifies a container:

					page: content, folder, accordion, window
					layout: anchor, fit, hbox, vbox, box, table, column, border
					editor: grid, form, chart, pivot, find,  null
					embed: post (or the name of a jade view)

		#fit.Source.Attributes
			:markdown
				> 	path 	= data path "/table.db?apiParms", [inline data], {inline parms}, or 0
				> 	class 	= unique name for this data descriptor
				> 	links	= link data "SlaveField.ToTable.MasterField, SlaveField.Value, PivotTable, ..."
				> 	key	= unique id field.  Defaults to "ID".  Set to "Name" when queuedown field attribute used.
				> 	sync 	= synchronously load the data 
				>	selects = field generators "expression AS field, ..."
				
		#fit.Column.Attributes
			:markdown
				> 	cols	= ungrouped fields "field.type.label.summary.tip, field*, field*count, ..."
				> 	cols	= grouped fields "group(field,group(field, ...), ...), ..."
				> 	cols	= pivoted fields "Pivot(NodeID,NodeCount,pivot,pivot, ...), ..."
				>	pivots 	= pivot shortcut "pivot,pivot,..." 
				
		#fit.Column.Types
			:markdown
				>	summary		summarize name by min,max,sum,average
				>	name*		match parms DD fields "field0, field1, ..."
				>	name*count	match parms DD fields "field0, field1, ... name[count-1]"
				>	label		label name for field
				>	type		field data type (caps imply disable editing)
				>	basic		int, autonum, checkbox, boolean, text, html, file, $, %, number, svg, xtextarea, empty
				>	date		date, mediumdate, defaultdate, iso8601long, iso8601short,shortdate, longdate, fulldatetime, monthday, shorttime, longtime, sortabledatetime, universalsortabledatetime, yearmonth
				>	pulldown	p DataTable : ValueField : DisplayField : ... 
				>	multidown	m DataTable : ValueField : DisplayField : ... 
				>	queuedown	q DataTable : ValueField : DisplayField : ...   <<<< SEE KEY ATTRIBUTE >>>>
				>	action		##...	icon link to icons/fieldValue[0, 1, ...]
				>	action		#a	file link to link/fieldValue
				>	action		#i	image link to link/fieldValue  
			
		#fit.Session.Attributes
			:markdown
				>	guard	= password guard
				>	icons	= path to icon resources
				>	start	= widget (DOM DIV) to start parsing
				>	query	= query parameters
		
		#fit.Presentation.Attributes
			:markdown
				>	dims	= "[width, height]" maximum dimensions
				>	sorts	= "field, field, ..." sort fields
				>	title	= "<=>$X..." header align (<)left,(=)center,(>)right with $N name,$P path,$S links
				>	help 	= "help content" override to html indented under this widget
				>	page	= N number of records allowed in data store 
				>	plot	= "bar,column,scatter,info,pie,radar,xgrid,ygrid,[xmin,xmax,ymin,ymax]"
				>	dock	= "top,bottom,left,right" folder docking
				>	region	=  "north,south,east,west,center" region specification
				>	track	= "M,U" track client as (M)moderator, (U)nonmoderator, or "" to disable
		
		#fit.Presentation.Switches
			:markdown
				>	actions	enable CRUD actions and CRUD status buttons
				>	filter 	enable grid field filters
				>	print 	enable grid printing
				>	typical	enable typically used switches
				>	summary include column aggregates
				>	resize	include resizing handles
				>	crush	include grid collapse button
				>	refresh	include grid refresh button
				>	hide	hide this component
				>	wrap	wrap component so it is always exposed
				>	header	toggle default header logic
				>	disable to disable this component
				>	guard	to forbid content editing
				>	hold	hold view state (experimental)
				>	kiss	use simple tab/header names when linking
				>	create	create the table if it does not already exists
				>	alert	display the path name
				>	debug	display loaded data in the browser console
			
		#fit.Menus.Attributes
			:markdown
				>	search	= "field, ..." search enabled fields
				>	menu	= "name([attr],[DD],[special], ...)"
				>	[DD]	= combobox via DD
				>	[special] = Send,Open,TipMe,Users,Themes,Skins,Queues,Engines,Search,Uploads,Stores,$stores,$uploads
				>	[attr]	= "DD" or "DD/Path/Query" feeds store DD after Query ?field-replacements
			
		#fit.Workflow.Attributes
			:markdown
				## All systems [default value]
				
					run [false] autorun simulation with the specified simulation options
					stats = "name" ["stats"] of simulation options in simoptions.db
					buffers = N [0] reserved
				
				## Discrete systems
				
					inputs = "link, link, ..." [""] input ports
					outputs = "link, link, ..." [""] output ports
				
				where link = "name|N|system|name" defines an N-threaded or N=0 simple port.
				
				## State machines:
				
					routes = "route, route, ..." [""] are the routes for a state machine
				
				where route = "fromState | toState | condition | exit | entry" [""] defines from-to machine states, condition code and from state exit-entry code (condition=start to define initial state).
				
				## Petri nets:
				
					markers	= "transition, transition, ..." [""] are the transitions for a petri net
				
				where:
				
					transition = "fromPlaces || transition || toPlaces" defines from-to places and transition to take-deposit petri net tokens ("n|k|..." initializes each place with n,k,... tokens).
					places = "place | place | ..." are the places from which to take-deposit petri net tokens.
					start = "name" ["content"] of component to open
		
	#fit.TAU.Workflows
	
		#folder(dock="left")
			#fit.Intro
				:markdown
					## Models
					A workflow defines a network of systems.  A system (aka machine, engine or application) can be a 
					discrete block (triggered or sampled), a state machine, or a petri net.  Each system has a URL identifing 
					the path to a restful application that sinks and sources event tokens.  The [api](/api.view) explains
					the workflow engine interface.  Workflows can be defined using the [workflow editor](/workflow.view).
					
					Engine stats (event rates, queueing delay, utilization, drops, etc), machine states, and petri tokens are
					logged as the client steps/advances a workflow with the specified simulation options (number of steps, 
					step size, stats snapshot period).
					
					Workflows are constructed using the system skins, and are compiled, linked and executed at the client
					using the [workflow editor](/workflow.view).  A workflow skin will thus look like:
					
						#system.label(inputs="link,link,...",outputs="link,link,...")  
							#system.label(inputs="link,link,...",outputs="link,link,...")  
							#system.label(inputs="link,link,...",outputs="link,link,...")  
					
					where i/o ports can accept/produce either simple or N-fold threads:
					
						input link = name|N|system|name  
						output link = name|N
					
					## Threaded Models
					System i/o ports (and their corresponding i/o event tokens) can be either simple or N-fold threaded.
					Whereas simple ports are sampled, threaded ports are triggered.  In an algorithm chain of, say, 3 systems, 
					with 5, 10, and 2 threaded output ports, there are 5*10*2=100 total execution threads that can be shared
					(hyper-threaded) among K processing cores (if the server implements, say, K=4 processing cores, then 
					no more than 100/4=25 threads are impacted by a single failing thread).
					
					## Application Interface
					Each system application supports TAUINIT, TAUSTEP, TAUKILL, and TAUREAD (restful PUT, POST, DELETE, GET) to
					program, advance, deallocate and read an engine given itau, otau and state parameters: 
					
						itau = [event1, event2, ...] events being sinked to inputs ports 1,2, ... 
						otau = [event1, event2, ...] events being sourced from output ports 1,2, ...
						state = {simulation step count, relative simulation time, depth of queue, drops from queue, 
								engine index, as well as a port reset, port name, and port index when stepping i/o threads}.
 			
			#fit.Examples
				:markdown
					## STEP/POST example
					A POST to system X with a state hash of {... reset:1,name:"A"} directs system X to load its 
					input state variable "A" with the contents of the input job stream itau[0].job.  A POST to system X with a state
					hash of {... reset:0,name:"B"} directs X to advance its output variable "B" into each 
					output job stream otau[n].job.
					
					## INIT/PUT example
					
					## FREE/DELETE example
					
					## READ/GET example
			
	#fit.Local.Variables
		:markdown
			The #{title} provides a jade skin the following variables (current value or "N/A") when referenced
			by \\#{var} (escaped) or \\!{var} (unescaped):
			
				ID	client's unique session ID (#{ID})
				DB	active database (#{DB})
				action	SQL current action (#{sql})
				source	SQL database table, view, etc
				args	SQL argument hash (#{args})
				url	URL to _src flag redirect (#{url})
				flags	hash of _flags passed in url (#{flags})
				location client's location (#{location})
				org	stakeholder's organization (#{org})
				email	client's email address (#{email})
				user	client's user ID (#{user})
				joined	session start time (#{joined})
				query	query hash (#{query})
				server	site URL (#{server})
				contact	site contact (#{contact})
				server	path to site (#{server})
				by	site credit (#{by})
				title	site name (#{title})
				ver	site full version number View.Icon.Fix (#{ver})
				icons	site version number (#{icons})
				date	site release date (#{date})
				socket	URL to socket.io (#{socket})
				share	URL to public area (#{share})
				type	Client type M=moderator, U=nonmoderator (#{type})
				moderator true if user is a moderator (#{moderator})
				options	site format options (#{options})
